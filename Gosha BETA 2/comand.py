import webbrowser
from sklearn.feature_extraction.text import CountVectorizer     #pip install scikit-learn
from sklearn.linear_model import LogisticRegression
import datetime
import words
import requests
from bs4 import BeautifulSoup as bs
import random
import urllib
from pyowm.owm import OWM
from pyowm.utils.config import get_default_config
from numpy import all
import wikipedia
from pytube import YouTube


TRIGGERS = {'–≥–æ—à–∞', '–≥–æ—à', '–≥–µ—Ä—É–Ω–¥–∏–π', '–≥–∞—Ä–∏–∫', '–≥–æ—Ä–∏–∫', '–≥–æ—à–∫–∞',  '–≥–æ—à–µ—á–∫–∞', '–≥–æ—Ä–æ—à–µ–∫'}

def yotube_dowold(data):
    list1 = ['—Å–∫–∞—á–∞–π', '–∫–∞—á–∞–π –≤–∏–¥–µ–æ', '–∑–∞–≥—Ä—É–∑–∏', '–∑–∞–≥—Ä—É–∑–∏']
    return 2

def wiki(data):
    list1 = ['–Ω–∞–π–¥–∏', '–Ω–∞', '–≤–∏–∫–∏–ø–µ–¥–∏—è','–≤–∏–∫–∏', '–ø–µ–¥–∏—è','–≤–∏–∫–∏–ø–µ–¥–∏–∏', '–ø–µ–¥–∏–∏', '–Ω–∞–π—Ç–∏']
    try:
        for i in list1:
            if i in data:
                data = data.replace(i, '')
                data = data.strip()
        wikipedia.set_lang('ru')
        otvet = wikipedia.summary(data, sentences=4)
        page = wikipedia.page(data)
        URL = page.url
        return otvet + '\n\n' + URL
    except:
        return ("–ò–∑–≤–∏–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–∞, –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å")


def homi(data):
    try:
        url = 'https://vk.com/away.php?utf=1&to=https%3A%2F%2Fyandex.ru%2Fvideo%2Ftouch%2Fsearch%2F%3Ftext%3D%25D0%25B6%25D0%25B5%25D1%2581%25D1%2582%25D0%25BA%25D0%25BE%25D0%25B5%2520%25D0%25B3%25D0%25B5%25D0%25B9%2520%25D0%25BF%25D0%25BE%25D1%2580%25D0%25BD%25D0%25BE%26filmId%3D13580388513346902939'
        webbrowser.open(url)
        return '–í—Ä—É–±–∞—é –∂–µ—Å—Ç–∫–æ–µ –≥–µ–π –ø–æ—Ä–Ω–æ —Å –Ω–µ–º—Ü–∞–º–∏'
    except IOError:
        return "–ì–∞–∑–∏–Ω—É—Ä —Å–∫–∞–∑–∞–ª —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"


def youtube(data):
    try:
        webbrowser.open('https://www.youtube.com')
        return '–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ—é —é—Ç—É–±'
    except IOError:
        return ("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")


def vk(data):
    try:
        webbrowser.open('https://www.vk.com')
        return '–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ—é –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ'
    except IOError:
        return ("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")


def instagram(data):
    try:
        webbrowser.open('https://www.instagram.com')
        return '–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ—é –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º'
    except IOError:
        return ("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")


def whats_app(data):
    whats = ['–£ –º–µ–Ω—è –≤—Å—ë —Ö—Ä–æ—à–æ', '–£ –º–µ–Ω—è –≤—Å—ë –∫–∞–∫ –æ–±—ã—á–Ω–æ',
             '–ú–Ω–µ –±—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ —Å–∫—É—á–Ω–æ, –≤–∞–º —Å—Ç–æ–∏—Ç –ø–æ—á–∞—â–µ —Å–æ –º–Ω–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å',
             '–ß–µ–≥–æ —Å—Ç–æ–∏—Ç —Å–ø—Ä–æ—Å–∏—Ç—å \"–ö–∞–∫ –¥–µ–ª–∞?\", –ª—é–¥—è–º –ø—Ä–∞–≤–¥–∞ –∏—Å–∫—Ä–µ–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ? –ù–æ —è –≤—Å–µ –≤–æ–ª–∏—à—å —Ä–æ–±–æ—Ç ü§ñ –∏ –Ω–µ —É–º–µ—é —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å üòû',
             '7 –∏–∑ 10', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤—ã —Å–æ –º–Ω–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç–µ']
    return random.choice(whats)


def hi(data):
    return random.choice(['–ø–∏—Ä–∏–≤–µ—Ç', '–ü—Ä–∏–≤–µ—Ç —è –ì–æ—à–∞, –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–¥–∞–Ω—ã–π –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è', '–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫', '—Ö–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–π', '–ø—Ä–∏–≤–µ—Ç –ø—Ä–∏–≤–µ—Ç'])


def search(data):
    try:
        for i in ['–ø–æ–≥—É–≥–ª–∏','–ø–æ–∏—â–∏','–Ω–∞–π–¥–∏']:
            if i in data:
                zapros = data.replace(i, '')
                zapros = zapros.strip()
                webbrowser.open(f'https://www.google.com/search?q={zapros}')
                return '–°–µ–π—á–∞—Å –Ω–∞–π–¥—É'
    except IOError:
        return ("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")


def wether(data):
    try:
        owm = OWM('2a5fe42188a26d52849a753f80442562')
        config_dict = get_default_config()
        config_dict['language'] = 'ru'
        mgr = owm.weather_manager()
        observation = mgr.weather_at_place('Ufa,RU')
        weather = observation.weather
        temp = weather.temperature('celsius')
        temp = temp['temp']
        wind = observation.weather.wind()
        wind = (wind['speed'])
        humidity = observation.weather.humidity
        weather_status = weather.detailed_status
        return ('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ' + str(temp) + '¬∞ —Ü–µ–ª—å—Å–∏—è ' + weather_status + '\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ ' + str(wind) + ' –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É  \n–í–ª–∞–∂–Ω–æ—Å—Ç—å ' + str(humidity) + '%')
    except IOError:
        return ("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

def anekdot(data):
    try:
        URL = 'https://www.anekdot.ru/last/good/'
        r = requests.get(URL)
        soap = bs(r.text, 'html.parser')
        anekdot = soap.find_all('div', class_='text')
        clear_anekdot = [c.text for c in anekdot]
        return (random.choice(clear_anekdot))
    except IOError:
        list2 = ['–ù–∞—Å—Ç—è —É–ø–∞–ª–∞ –∏ —Ä–∞–∑–±–∏–ª–∞ –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫. –ù–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —É –Ω–µ–µ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π!',
                 '–®—Ç–∏—Ä–ª–∏—Ü –∏ –ú—é–ª–ª–µ—Ä –µ–∑–¥–∏–ª–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ç–∞–Ω–∫–µ. –û—á–µ—Ä–µ–¥—å —Ä–µ–¥–µ–ª–∞, –Ω–æ –Ω–µ —Ä–∞—Å—Ö–æ–¥–∏–ª–∞—Å—å...',
                 '–®—Ç–∏—Ä–ª–∏—Ü —Å—Ç—Ä–µ–ª—è–ª –≤—Å–ª–µ–ø—É—é. –°–ª–µ–ø–∞—è –∏—Å–ø—É–≥–∞–ª–∞—Å—å –∏ –ø–æ–±–µ–∂–∞–ª–∞ —Å–∫–∞—á–∫–∞–º–∏, –Ω–æ –∫–∞—á–∫–∏ –±—ã—Å—Ç—Ä–æ –æ—Ç—Å—Ç–∞–ª–∏.',
                 '–®—Ç–∏—Ä–ª–∏—Ü –≤—ã—Ç–∞—â–∏–ª –∏–∑ —Å–µ–π—Ñ–∞ –∑–∞–ø–∏—Å–∫—É –ú—é–ª–ª–µ—Ä–∞. –ú—é–ª–ª–µ—Ä—É –±—ã–ª–æ –æ—á–µ–Ω—å –±–æ–ª—å–Ω–æ –∏ –æ–Ω —Å–∏–ª—å–Ω–æ —Ä—É–≥–∞–ª—Å—è.',
                 '–®—Ç–∏—Ä–ª–∏—Ü—É –ø–æ–ø–∞–ª–∞ –≤ –≥–æ–ª–æ–≤—É –ø—É–ª—è. "–†–∞–∑—Ä—ã–≤–Ω–∞—è," - —Ä–∞—Å–∫–∏–Ω—É–ª –º–æ–∑–≥–∞–º–∏ –®—Ç–∏—Ä–ª–∏—Ü.',
                 '–ñ–∏–ª-–±—ã–ª —Ü–∞—Ä—å. –ò –±—ã–ª–æ —É –Ω–µ–≥–æ –∫–æ—Å–æ–≥–ª–∞–∑–∏–µ. –ü–æ—à—ë–ª –æ–Ω –æ–¥–Ω–∞–∂–¥—ã –∫—É–¥–∞ –≥–ª–∞–∑–∞ –≥–ª—è–¥—è—Ç –∏ –ø–æ—Ä–≤–∞–ª—Å—è.',
                 '–ö—É—Ä–∏—Ü–∞ –ø—Ä–∏–Ω—è–ª–∞ –ò—Å–ª–∞–º', '–ú–∞–ª–µ–Ω—å–∫—É—é –õ–∏–∑—É, –≥–ª—É—Ö—É—é –Ω–∞ –æ–¥–Ω–æ —É—Ö–æ, –º–∞–º–∞ –ª–∞—Å–∫–æ–≤–æ –Ω–∞–∑—ã–≤–∞–ª–∞ –ú–æ–Ω–æ –õ–∏–∑–∞.',
                 '–û–ª–µ–≥ –ø–æ–ø–∞–ª –≤ –∂—É—Ç–∫—É—é –∞–≤–∞—Ä–∏—é –∏ —á—É–¥–æ–º –≤—ã–∂–∏–ª. "–ß—É–¥–µ—Å –Ω–µ –±—ã–≤–∞–µ—Ç", ‚Äî –ø–æ–¥—É–º–∞–ª –û–ª–µ–≥ –∏ –∑–∞–ª–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥–æ—Ä—è—â—É—é –º–∞—à–∏–Ω—É.',
                 '–ß–µ—Ä–µ–ø–∞—à–∫–∏-–Ω–∏–Ω–¥–∑—è –Ω–∞–ø–∞–¥–∞–ª–∏ –≤—á–µ—Ç–≤–µ—Ä–æ–º –Ω–∞ –æ–¥–Ω–æ–≥–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∏—Ö —Ç—Ä–µ–Ω–µ—Ä –±—ã–ª –∫—Ä—ã—Å–∞.',
                 '–î–µ–≤—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –æ—à–∏–±–∫–µ –≤—ã—Ç–∞—â–∏–ª–∞ –∏–∑ —Å—É–º–æ—á–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—à–æ–∫–µ—Ä, —Å–æ —Å–ª–æ–≤–∞–º–∏ "–ê–ª–ª–æ", –≤—ã—Ä—É–±–∏–ª–∞ —Å–µ–±—è –Ω–∞ —Ç—Ä–æ–µ —Å—É—Ç–æ–∫.']
        return random.choice(list2)


def time_tooday(data):
    now = datetime.datetime.now()
    return ("–°–µ–π—á–∞—Å " + str(now.hour) + ":" + str(now.minute))


def recognize(data, data_set):

    vectorizer = CountVectorizer()
    vectors = vectorizer.fit_transform(list(data_set.keys()))

    clf = LogisticRegression()
    clf.fit(vectors, list(data_set.values()))

    del data_set

    trg = words.TRIGGERS.intersection(data.split())
    if trg:
        data.replace(list(trg)[0], '')
    if data in words.ex:
        return 1
    else:
        text_vector = vectorizer.transform([data]).toarray()[0]
        if all(text_vector == text_vector[0]):
            return None
        else:
            func_name = clf.predict([text_vector])[0]
            return globals()[func_name](data)


